#!/usr/bin/env raku

use Async::Command::Multi;
use Data::Dump::Tree;
#use Grammar::Debugger;
#use Grammar::Tracer;

use Redis;
use Redis::Client::SelectServerIP;

constant $users-allow-file  = '/etc/opt/quest/vas/users.allow';
constant $vastool           = '/opt/quest/bin/vastool';

my %Station-Terminals;
my %all-groups;
my $users-to-verify         = SetHash.new;
my $groups-allowed          = SetHash.new;
my SetHash %users-to-groups;

my $redis                   = Redis::Client::SelectServerIP.new.connection;
my @Station-Terminals-Raw   = $redis.smembers('fg:st:lc:all').list.sort({ $^a.fc cmp $^b.fc });

nslookup-forward();
ping();
#for @Station-Terminals-Raw -> $station-terminal {
#    next unless %Station-Terminals{$station-terminal}<pingable>;
#    printf "%-25s%s\n", %Station-Terminals{$station-terminal}<canonical-name>, %Station-Terminals{$station-terminal}<ip-address>;
#}

#   Grammars

grammar NSLOOKUP_FORWARD {
    token TOP {
        <dns-server-name> \n+
        <dns-server-address> \n+
        <non-auth-answer>*
        <host-name> \n+
        <host-address> \n+
    }
    token non-auth-answer {
        'Non-authoritative answer:'
        \n+
    }
    token dns-server-name {
        ^^
        'Server:'
        \s+
        $<dns-server-string> = .+?
        $$
    }
    token dns-server-address {
        ^^
        'Address:'
        \s+
        $<dns-server-ip-address> = <ip-address-format>
        '#'
        $<dns-server-port> = \d+
        $$
    }
    token host-name {
        ^^
        'Name:'
        \s+
        $<host-name-string> = .+?
        $$
    }
    token host-address {
        ^^
        'Address:'
        \s+
        $<host-ip-address> = <ip-address-format>
        $$
    }
    token ip-address-format {
        \d ** 1..3 '.' \d ** 1..3 '.' \d ** 1..3 '.' \d ** 1..3
    }
}

#   Check if supplied hostname is resolvable into an IP address

sub nslookup-forward {
    my %command;
    for @Station-Terminals-Raw -> $station-terminal {
        %command{$station-terminal} = 'nslookup', $station-terminal;
    }
    my %result = Async::Command::Multi.new(:%command, :5time-out, :10batch, :2attempts, :delay(.5)).sow.reap;
    for @Station-Terminals-Raw -> $station-terminal {
        if %result{$station-terminal}.exit-code == 0 {
            my $m = NSLOOKUP_FORWARD.parse(%result{$station-terminal}.stdout-results);
            %Station-Terminals{$station-terminal}<ip-address>       = ~$m<host-address><host-ip-address>;
            %Station-Terminals{$station-terminal}<canonical-name>   = ~$m<host-name><host-name-string>;
        }
        else {
            note "$station-terminal nslookup failed"
        }
    }
}

#   Check if pings are echoed

sub ping {
    my %command;
    for @Station-Terminals-Raw -> $station-terminal {
        %command{$station-terminal} = '/usr/bin/ping', '-c', '1', '-w', '1', %Station-Terminals{$station-terminal}<ip-address>;
    }
    my %result = Async::Command::Multi.new(:%command, :10time-out, :60batch, :2attempts, :delay(.5)).sow.reap;
    for @Station-Terminals-Raw -> $station-terminal {
        given %result{$station-terminal}.exit-code {
            when 0  { %Station-Terminals{$station-terminal}<pingable> = True; }
            default { %Station-Terminals{$station-terminal}<pingable> = False; }
        }
    }
}

#   Read all VAS groups directly from Active Directory

sub get-all-groups {
    my $proc = run $vastool, 'list', '-l', 'groups', :out;
    for $proc.out.lines {
#   for "/home/A028441/AD/list-l-groups".IO.lines {
        my @fields  = .split(/':'/);
        next        unless @fields[3] && @fields[3].elems;
        my $group   = @fields[0].subst(/^.*?\\/);
        my @ids;
        for @fields[3].split(/';'/) -> $record {
            if $record.match(/^ 'CN=' (<alnum>+) >>/) {
                @ids.append: $0.Str;
                %users-to-groups{$0.Str} = SetHash.new unless %users-to-groups{$0.Str}.defined;
                %users-to-groups{$0.Str}.set: $group.uc;
            }
            else {
                warn 'Unexpected record: ', $record;
            }
        }
        %all-groups{$group.uc} = @ids.sort if @ids.elems;
    }
}

#   Read $users-allow-file

sub get-users-allowed {
#   my $proc = run '/usr/bin/ssh', 'xxxxxxxx.xxxxx.xxxxx', 'cat', $users-allow-file, :out;
#   for $proc.out.lines {
    for "/home/A028441/AD/users.allow".IO.lines {
        next if /^\s*$/ || /^\s*'#'/;
        if /^ .+? '\\' (<alnum>+) $/ {
            my $group-or-user = $0.Str;
            if %all-groups{$group-or-user.uc}:exists {
                $groups-allowed.set($group-or-user.uc);
                $users-to-verify.set($_) for %all-groups{$group-or-user.uc}.values;
            }
            else {
                $users-to-verify.set($group-or-user);
            }
        } elsif /^ (<alnum>+) \s* $/ {
            if %all-groups{$0.Str.uc}:exists {
                $users-to-verify.set($_) for %all-groups{$0.Str.uc}.values;
            }
            else {
                warn 'Guessing ambiguous string "', $0.Str, '" is a user id (but this may be a mistake)';
                $users-to-verify.set($0.Str);
            }
        }
    }
}

get-all-groups();
get-users-allowed();

my @pending-ue;
for $users-to-verify.keys.sort -> $user {
    next unless %users-to-groups{$user} ∩ $groups-allowed;      # say $user, "\t", %users-to-groups{$user} ∩ $groups-allowed;
    next if run($vastool, 'isvas', 'user', $user, :out).so;     # say $user, "\t", %users-to-groups{$user}.keys;
    @pending-ue.append: $user;                                  # say $user;
}

#my $mail = run '/usr/bin/mailx', '-s', 'FG ST: UNIX-enablement Check', 'ITIO_FaregateLinuxadmins@wmata.com', :in;
#$mail.in.put: @pending-ue.elems, ' user ids of ', $users-to-verify.elems, ' require UNIX-enablement';
#$mail.in.close;

put @pending-ue.elems, ' user ids of ', $users-to-verify.elems, ' require UNIX-enablement';

=finish

sub centralized-sudo {
    my %command;
    for @Station-Terminals-Raw -> $station-terminal {
        if %Station-Terminals{$station-terminal}<pingable> {
            %command{$station-terminal} =
            'ssh',
            %Station-Terminals{$station-terminal}<canonical-name>,
#           '/usr/bin/ncat',
#           '-w',
#           '2',
#           '-z',
#           '10.10.132.63',
#           '12345';
           '/usr/bin/sudo',
           '-nl';
        }
    }
    my %result = Async::Command::Multi.new(:%command, :20time-out, :10batch, :2attempts, :delay(.5)).sow.reap;
    for @Station-Terminals-Raw -> $station-terminal {
        if %Station-Terminals{$station-terminal}<pingable> {
            given %result{$station-terminal}.exit-code {
                when 0  { %Station-Terminals{$station-terminal}<sudo> = True;  }
                default { %Station-Terminals{$station-terminal}<sudo> = False; }
            }
        }
    }
}
sub MAIN (
    Bool :$nosudo,                  #= report pingable STs with NO centralized SUDO connectivity
    Bool :$vr,                      #= query pingable STs' operating system V.Rs
) {
    @Station-Terminals-Raw = $redis.smembers('fg:st:lc:all').list.sort({ $^a.fc cmp $^b.fc });
    ping;
    if $pingable {
        for @Station-Terminals-Raw -> $station-terminal {
            next unless %Station-Terminals{$station-terminal}<pingable>;
            printf "%-25s%s\n", %Station-Terminals{$station-terminal}<canonical-name>,
                                %Station-Terminals{$station-terminal}<ip-address>;
        }
    }
}

=finish
